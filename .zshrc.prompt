# .zshrc のプロンプト設定部分

# プロンプトが表示される度にプロンプト文字列を評価する
setopt prompt_subst

# $fg[red] みたいな方法で色を指定できる様にする
autoload colors
colors

# 色
RESET="%{${reset_color}%}"
GREEN="%{${fg[green]}%}"
BLUE="%{${fg[blue]}%}"
RED="%{${fg[red]}%}"
CYAN="%{${fg[cyan]}%}"
WHITE="%{${fg[white]}%}"
YELLOW="%{${fg[yellow]}%}"


BOLD_RED="%{${fg_bold[red]}%}"
BOLD_CYAN="%{${fg_bold[cyan]}%}"
BOLD_BLUE="%{${fg_bold[blue]}%}"

POH="( ꒪⌓꒪) $"

case ${UID} in
0)
    PROMPT="${BOLD_RED}%/#${RESET} "
    PROMPT2="${BOLD_RED}%_#${RESET} "
    SPROMPT="${BOLD_RED}%r is correct? [n,y,a,e]:${RESET} "
    [ -n "${REMOTEHOST}${SSH_CONNECTION}" ] &&
        PROMPT="${CYAN}$(echo ${HOST%%.*} | tr '[a-z]' '[A-Z]') ${PROMPT}"
    ;;
*)
    PROMPT="${BOLD_BLUE}${USER}@%m ${RESET}${WHITE}${POH} ${RESET}"

    # viの入力モードでPROMPTの色を変える
    #
    # zle-line-init ラインエディタが新しい入力行を読み込むとき`
    # zle-keymap-select keymapが変更されるとき

    function zle-line-init zle-keymap-select {
      case $KEYMAP in
        vicmd)
        PROMPT="${BOLD_CYAN}${USER}@%m ${RESET}${WHITE}${POH} ${RESET}"
        ;;
        main|viins)
        PROMPT="${BOLD_BLUE}${USER}@%m ${RESET}${WHITE}${POH} ${RESET}"
        ;;
      esac
      zle reset-prompt
    }
    zle -N zle-line-init
    zle -N zle-keymap-select

    # git リポジトリにいるときはブランチを表示する

    # PCRE互換の正規表現を使う
    setopt re_match_pcre

    autoload -Uz add-zsh-hook # フック関数の制御を可能に
    autoload -Uz vcs_info # VCSの様々な除法を取得

    zstyle ':vcs_info:*' enable git svn # 扱うVCSを限定

    zstyle ':vcs_info:git:*' check-for-changes true # 作業ディレクトリの更新をチェック
    zstyle ':vcs_info:git:*' stagedstr "C"
    zstyle ':vcs_info:git:*' unstagedstr "A"
    zstyle ':vcs_info:git:*' formats '%b-%c%u'
    zstyle ':vcs_info:git:*' actionformats '%b(%a)-%c%u'

    function _update_vcs_info_msg() {
        LANG=en_US.UTF-8 vcs_info

        # 交信したVCS情報をプロンプトで使える変数に格納
        psvar=()
        [[ -n "$vcs_info_msg_0_" ]] && psvar[1]="$vcs_info_msg_0_"
        psvar[2]=$(display_if_git_not_pushed)
    }
    add-zsh-hook precmd _update_vcs_info_msg # プロンプト表示時にVCS関連表示を更新

    # pushされていないcommitがある場合に文字列を出力する
    function display_if_git_not_pushed()
    {
      if [ "$(git rev-parse --is-inside-work-tree 2>/dev/null)" = "true" ]; then
        head="$(git rev-parse HEAD)"
        for x in $(git rev-parse --remotes)
        do
          if [ "$head" = "$x" ]; then
            return 0
          fi
        done
        echo "P"
      fi
      return 0
    }

    # gitの作業状態により色とメッセージを表示する
    function display_git_status_with_color()
    {
      local name gitstatus color

      if [[ "$PWD" =~ '/\.git(/.*)?$' ]]; then
        return
      fi

      name=`git rev-parse --abbrev-ref=loose HEAD 2> /dev/null`
      if [[ -z $name ]]; then
        return
      fi
      
      gitstatus=`git status 2> /dev/null`
      if [[ "$gitstatus" =~ "(?m)^nothing to" ]]; then
        color=${GREEN}
      elif [[ "$gitstatus" =~ "(?m)^nothing added" ]]; then
        color=${YELLOW}
      elif [[ "$gitstatus" =~ "(?m)^# Untracked" ]]; then
        color=${BOLD_RED}
      else
        color=${RED}
      fi

      echo "$color%1v%2v${RESET}"
    }

    # 右プロンプト生成
    RPROMPT='${WHITE}[`display_git_status_with_color` ${WHITE}%(5~,%-2~/.../$2~,%~)]${RESET}'

    ;;
esac




